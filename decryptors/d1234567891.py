global privateKey
m_id = '1234567891'
privateKey = 'PrivateKey(109822860789870844316884291014028487631706866376856306676841538191768724971827223477901623720192337167546804413524695205390871360713772469809988517750373624794475364064020834966889904779465550095426503072116848979995821591181252297255808041197424746629695028333177063567892712763996986103499337604843920247679, 65537, 77363809971252380633498589548570321932542089201829884040309188606426701340835671854132539821629302989366820564859462647775765721807112525958126520898309837935693541691530898457996104517311166799186752468276028968366252353958144000214490872590015689591206206053917622855752940972767087745166642071752545773289, 45462537468041999618328701752830078542346517602038339309093628530108202485495263142022208277934058364708783666089412791902654074571918181171284911210876279656130557, 2415678202455617204230096951923088835919411356745170010332464672032535409148078868597017322695799636590525933277360377371134680005744821621269547)'

import os
import rsa
import pickle

t = privateKey.split(', ')
n = int((t[0])[11:])
e = int(t[1])
d = int(t[2])
p = int(t[3])
q = int((t[4])[:-1])

def decrypt():
    global privateKey

    pk = rsa.key.PrivateKey(n, e, d, p, q)

    for part in range(65, 91):
        if part != 67:
            partpath = chr(part) + ":\\"
            try:
                for dirpath, dirs, files in os.walk(partpath, topdown = True):
                    dirpath = dirpath + "\\"
                    for filename in files:
                        fname = dirpath + filename
                        chk = ".nk"
                        if fname[-3:] == chk:
                            nfname = fname[:-3]
                            with open(fname, 'rb') as f:
                                data = pickle.load(f)
                            os.rename(fname, nfname)
                            with open(nfname, 'wb') as f:
                                pass
                            for i in range(len(data)):
                                pt = rsa.decrypt(data[i], pk)
                                with open(nfname, 'ab') as f:
                                    f.write(pt)
            except:
                pass

decrypt()
